# DML
- Data Manipulation Language (DML) in Oracle SQL is used to manage data within schema objects.
- The primary DML commands are INSERT, UPDATE, and DELETE. These commands allow you to add, modify, and remove data from tables.

1. INSERT Command
Purpose: Adds new rows of data to a table.

# employees Table
------------------------------------------------------------------------------------------
| employee_id | first_name | last_name | email                     | salary | manager_id |
|-------------|------------|-----------|---------------------------|--------|------------|
| 1           | John       | Doe       | john.doe@example.com      | 75000  | NULL       |
| 2           | Jane       | Smith     | jane.smith@example.com    | 50000  | 1          |
| 3           | Alice      | Johnson   | alice.johnson@example.com | 70000  | 1          |
------------------------------------------------------------------------------------------

INSERT INTO employees (first_name, last_name, email, phone_number, job_id, department_id, salary, manager_id)
VALUES ('Bob', 'Williams', 'bob.williams@example.com', '2233445566', 2, 2, 55000, 1);

------------------------------------------------------------------------------------------
| employee_id | first_name | last_name | email                     | salary | manager_id |
|-------------|------------|-----------|---------------------------|--------|------------|
| 1           | John       | Doe       | john.doe@example.com      | 75000  | NULL       |
| 2           | Jane       | Smith     | jane.smith@example.com    | 50000  | 1          |
| 3           | Alice      | Johnson   | alice.johnson@example.com | 70000  | 1          |
| 4           | Bob        | Williams  | bob.williams@example.com  | 55000  | 1          |
------------------------------------------------------------------------------------------

2. UPDATE Command
Purpose: Modifies existing rows of data in a table.

Syntax:
-------
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

Explanation:
------------
"SET" is primarily used within the "UPDATE" statement to specify which columns in a table should be updated and what values to assign to them.


# employees Table
------------------------------------------------------------------------------------------
| employee_id | first_name | last_name | email                     | salary | manager_id |
|-------------|------------|-----------|---------------------------|--------|------------|
| 1           | John       | Doe       | john.doe@example.com      | 75000  | NULL       |
| 2           | Jane       | Smith     | jane.smith@example.com    | 50000  | 1          |
| 3           | Alice      | Johnson   | alice.johnson@example.com | 70000  | 1          |
------------------------------------------------------------------------------------------

UPDATE employees
SET salary = salary + 5000
WHERE employee_id = 2;


# employees Table
------------------------------------------------------------------------------------------
| employee_id | first_name | last_name | email                     | salary | manager_id |
|-------------|------------|-----------|---------------------------|--------|------------|
| 1           | John       | Doe       | john.doe@example.com      | 75000  | NULL       |
| 2           | Jane       | Smith     | jane.smith@example.com    | 55000  | 1          |
| 3           | Alice      | Johnson   | alice.johnson@example.com | 70000  | 1          |
------------------------------------------------------------------------------------------

3. DELETE Command
Purpose: Removes existing rows of data from a table.

# employees Table
------------------------------------------------------------------------------------------
| employee_id | first_name | last_name | email                     | salary | manager_id |
|-------------|------------|-----------|---------------------------|--------|------------|
| 1           | John       | Doe       | john.doe@example.com      | 75000  | NULL       |
| 2           | Jane       | Smith     | jane.smith@example.com    | 55000  | 1          |
| 3           | Alice      | Johnson   | alice.johnson@example.com | 70000  | 1          |
| 4           | Bob        | Williams  | bob.williams@example.com  | 55000  | 1          |
------------------------------------------------------------------------------------------

DELETE FROM employees
WHERE employee_id = 4;

# employees Table
------------------------------------------------------------------------------------------
| employee_id | first_name | last_name | email                     | salary | manager_id |
|-------------|------------|-----------|---------------------------|--------|------------|
| 1           | John       | Doe       | john.doe@example.com      | 75000  | NULL       |
| 2           | Jane       | Smith     | jane.smith@example.com    | 55000  | 1          |
| 3           | Alice      | Johnson   | alice.johnson@example.com | 70000  | 1          |
------------------------------------------------------------------------------------------

4. MERGE Command (Advanced DML)
Purpose: Combines INSERT and UPDATE operations into a single statement, useful for upserting data.

Syntax:
------
MERGE INTO target_table alias1
USING source_table alias2
ON (condition)
WHEN MATCHED THEN
    UPDATE SET column1 = value1, column2 = value2, ...
WHEN NOT MATCHED THEN
    INSERT (column1, column2, ...)
    VALUES (value1, value2, ...);

Explanation:
-----------
MERGE INTO: Specifies the target table that will receive the data.
target_table: The table where data will be inserted or updated.
alias1: An alias for the target table to simplify references.
USING: Indicates the source of the data to be merged.
source_table: The table or dataset providing the new or updated data.
alias2: An alias for the source table.
ON (condition): Defines the condition that determines how rows from the source and target tables are matched.
WHEN MATCHED THEN: Specifies the action to take when a match is found (usually an UPDATE).
UPDATE SET: Assigns new values to the specified columns in the target table.
WHEN NOT MATCHED THEN: Specifies the action to take when no match is found (usually an INSERT).
INSERT (column1, column2, ...) VALUES (value1, value2, ...): Defines the columns and corresponding values to insert as new rows in the target table.

# employees Table
------------------------------------------------------------------------------------------
| employee_id | first_name | last_name | email                     | salary | manager_id |
|-------------|------------|-----------|---------------------------|--------|------------|
| 1           | John       | Doe       | john.doe@example.com      | 75000  | NULL       |
| 2           | Jane       | Smith     | jane.smith@example.com    | 55000  | 1          |
| 3           | Alice      | Johnson   | alice.johnson@example.com | 70000  | 1          |
------------------------------------------------------------------------------------------

MERGE INTO employees e
USING (SELECT 4 AS employee_id, 'Tom' AS first_name, 'Brown' AS last_name, 'tom.brown@example.com' AS email, '3344556677' AS phone_number, 3 AS job_id, 3 AS department_id, 60000 AS salary, 1 AS manager_id FROM dual) s
ON (e.employee_id = s.employee_id)
WHEN MATCHED THEN
    UPDATE SET e.salary = s.salary
WHEN NOT MATCHED THEN
    INSERT (employee_id, first_name, last_name, email, phone_number, job_id, department_id, salary, manager_id)
    VALUES (s.employee_id, s.first_name, s.last_name, s.email, s.phone_number, s.job_id, s.department_id, s.salary, s.manager_id);

# employees Table
------------------------------------------------------------------------------------------
| employee_id | first_name | last_name | email                     | salary | manager_id |
|-------------|------------|-----------|---------------------------|--------|------------|
| 1           | John       | Doe       | john.doe@example.com      | 75000  | NULL       |
| 2           | Jane       | Smith     | jane.smith@example.com    | 55000  | 1          |
| 3           | Alice      | Johnson   | alice.johnson@example.com | 70000  | 1          |
| 4           | Tom        | Brown     | tom.brown@example.com     | 60000  | 1          |
------------------------------------------------------------------------------------------

# Explanation:
Command: Attempts to update the salary of an employee with employee_id 4. If the employee does not exist, it inserts a new employee named Tom Brown.
Result: Since employee_id 4 does not exist, Tom Brown is inserted into the employees table.
