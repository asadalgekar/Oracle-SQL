#Constraints
--------------
Constraints are rules applied to table columns to enforce the integrity and accuracy of the data stored within the table.
They ensure that only valid data is entered, maintaining the reliability of the database.

# Types
1. CLC: Applies to a single column, Declared alongside the column definition.
2. TLC: Can involve one or multiple columns, Declared after all column definitions

1. Primary Key: 
---------------
- PK constraint requires that each row has a unique value for the column or columns and it does not allow null values.
- Whenever a column declared as PK:
  - Column is forced to be Not Null.
  - An index is created for the column.
- Table can have only one PK.

CLC Syntax:
---------
CREATE TABLE table_name (
    column1 datatype CONSTRAINT constraint_name PRIMARY KEY,
    column2 datatype,
    ...
);


TLC Syntax:
----------
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    ...
    CONSTRAINT constraint_name PRIMARY KEY (column1, column2, ...)
);

# Drop Primary Key Constraint from an Existing Table:
-------------------------------------------------
Removes the primary key constraint from a table.

ALTER TABLE table_name
DROP PRIMARY KEY;

Add Primary Key Constraint to an Existing Table:
------------------------------------------------
Adds a primary key constraint to a specific column in an existing table.

ALTER TABLE table_name
ADD CONSTRAINT constraint_name
PRIMARY KEY (column_name);

2. Unique Constraints 
---------------------
- Ensure that all values in a column or a combination of columns are unique across the table.
- Can be CLC or TLC.

Drop UNIQUE Constraint from an Existing Table:
---------------------------------------------
Removes the unique constraint, allowing duplicate values in the specified column.

ALTER TABLE table_name
DROP CONSTRAINT constraint_name;

Add UNIQUE Constraint to an Existing Table:
---------------------------------------------
Enforces unique values in the specified column to prevent duplicates.

ALTER TABLE table_name
ADD CONSTRAINT constraint_name
UNIQUE (column_name);

3. Foreign Key
--------------
- Ensure referential integrity by enforcing that a value in one table matches a value in another table's primary key.
- To create foreign key at the table level we write FOREIGN KEY keywords followed by REFERENCES keyword followed by the name of the related table and the name of the related column in parenthesis.

Syntax:
------
CREATE TABLE child_table (
    column1 datatype,
    column2 datatype,
    -- other columns
    CONSTRAINT constraint_name FOREIGN KEY (column_name) REFERENCES parent_table(parent_column)
);

Drop FOREIGN KEY Constraint from an Existing Table:
---------------------------------------------------
Removes the foreign key constraint, breaking the relationship between child and parent tables.

ALTER TABLE table_name
DROP CONSTRAINT constraint_name;

Add FOREIGN KEY Constraint to an Existing Table:
-------------------------------------------------
Creates a relationship between the child table and the parent table, enforcing referential integrity.

ALTER TABLE table_name
ADD CONSTRAINT constraint_name
FOREIGN KEY (child_column)
REFERENCES parent_table(parent_column);

# Handling Deletions of Primary Table Rows
-----------------------------------------
Oracle provides several options to define how deletions in the parent table affect related rows in the child table:

ON DELETE CASCADE
ON DELETE SET NULL
ON DELETE NO ACTION (Default)

1. ON DELETE CASCADE
- Automatically deletes all child rows that reference the deleted parent row.

Use Case:
----------
When you want deletions in the parent table to propagate to child tables, ensuring no orphaned records remain.

Syntax Example:
--------------
CREATE TABLE employees (
    employee_id NUMBER PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    department_id NUMBER,
    manager_id NUMBER,
    CONSTRAINT fk_department_id FOREIGN KEY (department_id)
        REFERENCES departments(department_id)
        ON DELETE CASCADE,
    CONSTRAINT fk_manager_id FOREIGN KEY (manager_id)
        REFERENCES employees(employee_id)
        ON DELETE CASCADE
);

2. ON DELETE SET NULL
- Sets the foreign key column in child rows to NULL when the referenced parent row is deleted.

Use Case:
---------
When you want to retain child records but remove their association with the deleted parent.

Syntax Example:
----------------
CREATE TABLE employees (
    employee_id NUMBER PRIMARY KEY,
    first_name VARCHAR2(50) NOT NULL,
    last_name VARCHAR2(50) NOT NULL,
    department_id NUMBER,
    manager_id NUMBER,
    CONSTRAINT fk_department_id FOREIGN KEY (department_id)
        REFERENCES departments(department_id)
        ON DELETE SET NULL,
    CONSTRAINT fk_manager_id FOREIGN KEY (manager_id)
        REFERENCES employees(employee_id)
        ON DELETE SET NULL
);

3. ON DELETE NO ACTION (Default)
- Prevents deletion of a parent row if any child rows reference it.

Use Case:
When you want to ensure that parent records cannot be deleted as long as they are referenced by child records.

4.  NOT NULL Constraint
Ensures that a column cannot have NULL values, enforcing mandatory data entry.
Not Null can be only CLC.

# Dropping Not Null:
-----------------
Syntax:
------
ALTER TABLE table_name
MODIFY column_name datatype NULL;

5. CHECK Constraint
Ensures that all values in a column satisfy a specific condition.
Can be both CLC, TLC
